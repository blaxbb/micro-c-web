@using MicroCLib.Models;

@*<div class="modal fade" id="editItemModal" tabindex="-1" role="dialog" aria-labelledby="editItemTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @if (Component != null)
                {
                    <div class="col-sm-12">
                        <h5 class="modal-title row edit-item-title">@Component.Item.Name</h5>
                        <div class="row edit-item-description">
                            <div class="col-sm-6">@Component.Item.Brand</div>
                            <div class="col-sm-6 text-right">SKU @Component.Item.SKU</div>
                        </div>
                    </div>
                }
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

            </div>

        </div>
    </div>
</div>*@

@if (Component != null)
{
    <form>
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Price</label>
            <input type="number" class="form-control col-sm-10" @bind-value="Component.Item.Price" min="0" step=".01" />
        </div>
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Quantity</label>
            <input type="number" class="form-control col-sm-10" @bind-value="Component.Item.Quantity" min="1" step="1" />
        </div>
        @for(int i = 0; i < Component.Item.Quantity; i++)
        {
            var index = i;
            var existingSerial = Component.Serials.Count > index ? Component.Serials[index] : "";
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Serial Number (@(@index + 1))</label>
                <input type="text" class="form-control col-sm-10" @oninput="@((ChangeEventArgs args) => SetSerial(index, args.Value.ToString()))" value="@existingSerial"/>
            </div>
        }
    </form>
}
<div class="modal-component-footer">
    <button type="button" class="btn btn-danger mr-auto" data-dismiss="modal" @onclick="@(() => ItemRemoved.InvokeAsync())">Remove</button>
    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
    <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="@(() => ItemSaved.InvokeAsync(Component))">Save changes</button>
</div>

@code {
    private BuildComponent component;
    [Parameter]
    public BuildComponent Component { get => component; set { component = value; if (Component != null) { Component.Item.PropertyChanged += ItemPropertyChanged; } } }

    [Parameter]
    public EventCallback<BuildComponent> ComponentChanged { get; set; }

    [Parameter]
    public EventCallback<BuildComponent> ItemSaved { get; set; }

    [Parameter]
    public EventCallback ItemRemoved { get; set; }

    protected override void OnParametersSet()
    {
        base.OnInitialized();
    }

    void ItemPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs args)
    {
        if(args.PropertyName == nameof(Item.Quantity))
        {
            var qty = Component.Item.Quantity;
            if (Component.Serials.Count > qty)
            {
                Component.Serials.RemoveRange(qty, Component.Serials.Count - qty);
            }
        }
    }

    void SetSerial(int index, string value)
    {
        if(Component.Serials.Count <= index)
        {
            for (int i = Component.Serials.Count; i <= index; i++)
            {
                Component.Serials.Add(null);
            }
        }
        Component.Serials[index] = value;
    }
}