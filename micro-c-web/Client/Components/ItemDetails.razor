@using MicroCLib.Models;

@inject IJSRuntime js;
@inject HttpClient Http

@if (item != null)
{
    <div class="container">
        <h3 class="d-none d-md-block mt-2">@item.Name</h3>
        <h5 class="d-md-none mt-2">@item.Name</h5>
        <div class="row">
            @if (item.PictureUrls.Count > 0)
            {
                <div class="col-6 d-flex justify-content-center flex-column">
                    <img src="@item.PictureUrls[PictureIndex]" />
                    <div class="row">
                        <button type="button" class="btn btn-primary m-auto col-3" @onclick="(() => PrevPicture())">&lt;</button>
                        <button type="button" class="btn btn-primary m-auto col-3" @onclick="(() => NextPicture())">&gt;</button>
                    </div>
                </div>
            }
            <div class="col-6">
                <div class="card">
                    <ul class="list-group">
                        @if (item.OriginalPrice != item.Price)
                        {
                            <li class="list-group-item"><s>$@item.OriginalPrice</s></li>
                            <li class="list-group-item">$@item.Price</li>
                        }
                        else
                        {
                            <li class="list-group-item">$@item.Price</li>
                        }
                        <li class="list-group-item">@item.Stock in stock</li>
                    </ul>
                </div>
                @if (item.ClearanceItems.Any(c => !string.IsNullOrEmpty(c.State)))
                {
                    <div class="card">
                        <table class="table table-striped list-group">
                            @foreach (var clearance in item.ClearanceItems)
                            {
                                <tr class="list-group-item d-table-row p-0">
                                    <td class="align-middle">@clearance.Price</td>
                                    <td>@clearance.State</td>
                                </tr>
                            }
                        </table>
                    </div>
                }
            </div>
        </div>
        <div class="row">
            <table class="table table-striped">
                @foreach (var spec in item.Specs.Take(item.Specs.Count - 3))
                {
                    <tr>
                        <td>@spec.Key</td>
                        <td>@spec.Value.Replace("\n", "NL")</td>
                    </tr>
                }
            </table>
        </div>
    </div>
}
@code {
    private Item _item;
    [Parameter]
    public Item item { get => _item; set { _item = value; PictureIndex = 0; } }
    [Parameter]
    public EventCallback<Item> itemChanged { get; set; }

    private int PictureIndex { get; set; }
    Settings UserSettings;

    protected override Task OnInitializedAsync()
    {
        Task.Run(async () =>
        {
            UserSettings = await Settings.Get(js);
            var fresh = await Http.GetFromJsonAsync<Item>($"MicroCenterProxy/get?url={item.URL}&storeId={UserSettings.Store}");
            item.ClearanceItems = fresh.ClearanceItems;
            StateHasChanged();
        });

        return base.OnInitializedAsync();
    }

    public void NextPicture()
    {
        if (PictureIndex < item.PictureUrls.Count - 1)
        {
            PictureIndex++;
        }
        else
        {
            PictureIndex = 0;
        }
        Console.WriteLine($"{PictureIndex} - {item.PictureUrls.Count}");
        StateHasChanged();
    }

    public void PrevPicture()
    {
        if (PictureIndex > 0)
        {
            PictureIndex--;
        }
        else if (item.PictureUrls.Count > 0)
        {
            PictureIndex = item.PictureUrls.Count - 1;
        }
        else
        {
            PictureIndex = 0;
        }
        Console.WriteLine($"{PictureIndex} - {item.PictureUrls.Count}");
        StateHasChanged();
    }
}
