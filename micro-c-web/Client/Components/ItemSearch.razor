@using MicroCLib.Models;
@using System.Text.RegularExpressions; 
@using micro_c_web.Client.Pages;

@inject HttpClient Http
@inject IJSRuntime js


<div class="row item-search-view" style="flex-direction:row;">
    <div class="sidebar col-sm-4 bg-dark">
        <div class="">
            <form class="search-form" @onsubmit="(() => SearchSubmit())">
                <input class="form-control" placeholder="Search" @bind-value="SearchQuery" />
                <div class="btn-group dropright search-sidebar-item">
                    <button type="button" class="btn btn-primary" @onclick="(() => SearchSubmit())">Search All</button>
                    <button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split" data-toggle="collapse" data-target="#categoryCollapse" aria-controls="categoryCollapse" aria-expanded="false">
                        <span class="sr-only">Categories</span>
                    </button>
                </div>
                <div class="collapse @(Results == null ? "show" : "")" id="categoryCollapse">
                    @if (UserSettings != null)
                    {
                        @foreach (BuildComponent.ComponentType type in UserSettings.Categories)
                        {
                            <button type="button" class="btn btn-primary search-sidebar-item" @onclick="@(() => SearchSubmit(BuildComponent.CategoryFilterForType(type)))">
                                @Enum.GetName(typeof(BuildComponent.ComponentType), type)
                            </button>
                        }
                    }
                    <button type="button" class="btn btn-primary search-sidebar-item" data-toggle="collapse" data-target="#otherCategoryCollapse">
                        Other
                    </button>
                    <div class="collapse w-75 ml-auto" id="otherCategoryCollapse">
                        <button type="button" class="btn btn-primary search-sidebar-item" data-toggle="collapse" data-target="#byoCategoryCollapse">
                            BYO
                        </button>
                        <div class="collapse w-75 ml-auto" id="byoCategoryCollapse">
                            @foreach (BuildComponent.ComponentType type in SettingsPage.PresetBYO())
                            {
                                <button type="button" class="btn btn-primary search-sidebar-item" @onclick="@(() => SearchSubmit(BuildComponent.CategoryFilterForType(type)))">
                                    @Enum.GetName(typeof(BuildComponent.ComponentType), type)
                                </button>
                            }
                        </div>
                        <button type="button" class="btn btn-primary search-sidebar-item" data-toggle="collapse" data-target="#gsCategoryCollapse">
                            General Sales
                        </button>
                        <div class="collapse w-75 ml-auto" id="gsCategoryCollapse">
                            @foreach (BuildComponent.ComponentType type in SettingsPage.PresetGS())
                            {
                                <button type="button" class="btn btn-primary search-sidebar-item" @onclick="@(() => SearchSubmit(BuildComponent.CategoryFilterForType(type)))">
                                    @Enum.GetName(typeof(BuildComponent.ComponentType), type)
                                </button>
                            }
                        </div>
                        <button type="button" class="btn btn-primary search-sidebar-item" data-toggle="collapse" data-target="#sysCategoryCollapse">
                            Systems
                        </button>
                        <div class="collapse w-75 ml-auto" id="sysCategoryCollapse">
                            @foreach (BuildComponent.ComponentType type in SettingsPage.PresetSystems())
                            {
                                <button type="button" class="btn btn-primary search-sidebar-item" @onclick="@(() => SearchSubmit(BuildComponent.CategoryFilterForType(type)))">
                                    @Enum.GetName(typeof(BuildComponent.ComponentType), type)
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </form>

            @if (SpecFilters != null && Results != null)
            {
                <div class="btn-group btn-group-toggle search-sidebar-item" data-toggle="buttons">
                    <label class="btn btn-outline-primary">
                        <input type="radio" name="options" id="inStockOnly" autocomplete="off" @onchange="((args) =>  InStockOnly = true)"> In Stock
                    </label>
                    <label class="btn btn-outline-primary active">
                        <input type="radio" name="options" id="allItems" autocomplete="off" checked @onchange="((args) =>  InStockOnly = false)"> All Items
                    </label>
                </div>
                <div id="accordion">
                    @foreach (var filter in SpecFilters)
                    {
                        <div class="row">
                            <div class="btn-group w-100">
                                <button class="btn btn-primary collapsed col-sm-10" data-toggle="collapse" data-target="#@(CSSEscape($"{filter.Key}_collapse"))" aria-expanded="true" aria-controls="@(CSSEscape($"{filter.Key}_collapse"))">
                                    @filter.Key
                                </button>
                                <button type="button" class="col-sm-2 btn btn-primary" @onclick="(() => ToggleCustomSort(filter.Key))" data-toggle="tooltip" title="Toggle Column" data-boundary="window">
                                    <span class="material-icons">arrow_right</span>
                                </button>
                            </div>
                        </div>
                        <div id="@(CSSEscape($"{filter.Key}_collapse"))" class="collapse" aria-labelledby="@(CSSEscape($"{filter.Key}_heading"))" data-parent="#accordion">
                            @foreach (var item in filter.Value)
                            {
                                @if (!string.IsNullOrWhiteSpace(item))
                                {
                                    var id = GetFilterId(filter.Key, item);
                                    <label class="btn btn-primary active w-100 mb-0 text-left">
                                        <input type="checkbox" value="" autocomplete="off" id="@id"
                                               @onchange="args => FilterChanged(filter.Key, item, args.Value)"> @item
                                        </label>
                                    }
                            }
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    <div class="searchBody col-sm-8">
        @if (State == PageState.Results)
        {
            var filteredResults = FilteredResults.ToList();
            <div class="row">
                @foreach (var filter in Filters)
                {
                    <div class="card d-inline-block filter-card" style="width: 18rem;">
                        <div class="card-header">@filter.Key</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var value in filter.Value)
                            {
                                <li class="list-group-item">
                                    <div>@value</div>
                                    <button class="btn btn-danger float-right" @onclick="@(() => RemoveFilter(filter.Key, value))">X</button>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
            <table class="table table-striped search-results-table">
                <thead>
                    <tr>
                        <th></th>
                        <th>
                            <div class="row">
                                @(filteredResults.Count)/@(Results.Items.Count) Results
                            </div>
                        </th>
                        <th>Brand</th>
                        @foreach (var sort in CustomSort)
                        {
                            <th class="column-sort" @onclick="@((args) => SetSort(sort))">
                                @if (SortField == sort && SortAscending)
                                {<span class="material-icons">arrow_upward</span>}
                                else if (SortField == sort && !SortAscending)
                                {<span class="material-icons">arrow_downward</span>}
                                else
                                {<span class="material-icons">sort</span>}
                                @sort
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < filteredResults.Count; i++)
                    {
                        var iFixBug = i;
                        var item = filteredResults[i];
                        <tr class="search-item @(Selected == item ? "selected" : "")"
                            tabindex="0"
                            @ref="resultElements[iFixBug]"
                            @onclick="@(() => {
                                            Selected = item;
                                            if (string.IsNullOrWhiteSpace(ActionName))
                                            {
                                                SubmitItem();
                                            } })"
                            @ondblclick="(() => {
                                             Selected = item;
                                             SubmitItem();
                                         })"
                            @onkeydown="@(async (args) =>{
                                              switch (args.Key)
                                              {
                                                  case "ArrowUp":
                                                      await SelectPrev();
                                                      break;
                                                  case "ArrowDown":
                                                      await SelectNext();
                                                      break;
                                                  case "Tab":
                                                      await SelectNext();
                                                      break;
                                                  case "Enter":
                                                      SubmitItem();
                                                      break;
                                              }
                                          })"
                            @onkeydown:preventDefault ="true"
                            @onkeydown:stopPropagation="true"
                        >
                            <td>
                                <img src="@item.PictureUrls.FirstOrDefault()" class="search-thumbnail mx-auto d-block" />
                            </td>
                            <td>
                                <div class="search-name">@item.Name</div>
                                <div class="search-sku">@item.SKU</div>
                            </td>
                            <td class="align-middle">
                                @item.Brand
                            </td>
                            @foreach (var sort in CustomSort)
                            {
                                <td class="align-middle">
                                    @(item.Specs.ContainsKey(sort) ? item.Specs[sort] : "")
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
        else if (State == PageState.Initial)
        {
            <div class="search-initial mt-3">
                <div class="w-100 d-block">
                    <h4>Micro C App</h4>

                    <div>
                        <p>
                            Unofficial Micro Center Android and iOS app primarily intended for employees.
                        </p>
                        <p>
                            App includes functions for looking up product information, creating customer quotes, and creating system builds. Uses Xamarin Forms as a application framework.
                        </p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <img class="app-screenshot row ml-auto mr-auto" src="https://raw.githubusercontent.com/blaxbb/Micro-C-App/master/screenshots/android.png" alt="Android App" />
                        <a class="row" href='https://play.google.com/store/apps/details?id=com.bbarrett.micro_c_app&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'>
                            <img class="app-link ml-auto mr-auto" alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png' />
                        </a>
                    </div>
                    <div class="col-sm-6">
                        <img style="padding: 0px 12px;" class="app-screenshot row ml-auto mr-auto" src="https://raw.githubusercontent.com/blaxbb/Micro-C-App/master/screenshots/ios.png" alt="iOS App" />
                        <a class="row" href='https://testflight.apple.com/join/z7dweftj'>
                            <img class="app-link ml-auto mr-auto" alt='Available on Apple TestFlight' src='/testflight.png' />
                        </a>
                    </div>
                </div>
            </div>
        }
        else if (State == PageState.Loading)
        {
            <div class="d-flex align-items-center mt-3">
                <strong>Loading...</strong>
                <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
            </div>
        }
        else if (State == PageState.Error)
        {
            <div class="alert alert-danger mt-3 mt-3" role="alert">
                <h4 class="alert-heading">Error!</h4>
                <p>@ErrorText</p>
                @if (!string.IsNullOrWhiteSpace(ErrorQuery))
                {
                    <hr />
                    <p>@ErrorQuery</p>
                }
            </div>
        }
    </div>
</div>
@if (Selected != null)
{
    <div class="row item-search-footer">
        <a href="//microcenter.com@(Selected.URL)" target="_blank" class="btn btn-primary" role="button">Info</a>
        @if (!string.IsNullOrWhiteSpace(ActionName))
        {
            <button type="button" class="btn btn-primary" @onclick="SubmitItem">@ActionName</button>
        }
    
    </div>
}




@code {
    enum PageState
    {
        Initial,
        Loading,
        Results,
        Error
    }
    PageState State;
    string ErrorText;
    string ErrorQuery;

    Settings UserSettings;
    [Parameter]
    public string ActionName { get; set; }

    [Parameter]
    public EventCallback<Item> Action { get; set; }

    public SearchResults Results { get; set; }
    public IEnumerable<Item> FilteredResults => Results.Items.Where(Filter).OrderBy(SortFunc);

    public string SearchQuery { get; set; }

    private Item Selected { get; set; }

    private bool InStockOnly { get; set; }

    private Dictionary<string, List<string>> Filters { get; } = new Dictionary<string, List<string>>();

    private Dictionary<string, List<string>> SpecFilters = new Dictionary<string, List<string>>();

    private string SortField;
    private bool SortAscending;

    private List<string> CustomSort;

    private ElementReference[] resultElements { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserSettings = await Settings.Get(js);
        State = PageState.Initial;

        //Results = new SearchResults()
        //{
        //    Items = new List<Item>()
        //    {
        //        new Item()
        //        {
        //            Name = "AAAA",
        //            OriginalPrice = 99.99f,
        //            Price = 49.99f,
        //            Brand = "A Brand",
        //            Stock = "5",
        //            SKU = "111111"
        //        },
        //        new Item()
        //        {
        //            Name = "AZXY",
        //            OriginalPrice = 99.99f,
        //            Price = 79.99f,
        //            Brand = "A Brand",
        //            Stock = "2",
        //            SKU = "121212"
        //        },
        //        new Item()
        //        {
        //            Name = "BBBB2",
        //            OriginalPrice = 99.99f,
        //            Price = .99f,
        //            Brand = "B Brand",
        //            Stock = "25",
        //            SKU = "323232"
        //        },
        //        new Item()
        //        {
        //            Name = "BBBB",
        //            OriginalPrice = 99.99f,
        //            Price = .99f,
        //            Brand = "B Brand",
        //            Stock = "25+",
        //            SKU = "323232"
        //        },
        //        new Item()
        //        {
        //            Name = "OOS",
        //            OriginalPrice = 99.99f,
        //            Price = .99f,
        //            Brand = "B Brand",
        //            Stock = "0",
        //            SKU = "323232"
        //        },
        //    }
        //};

        await ResetFilter();
        await js.InvokeVoidAsync("stopPropagation", ".search-filter-dropdown");
    }

    public async void SearchSubmit(string categoryFilter = "")
    {
        State = PageState.Loading;
        this.StateHasChanged();
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            if(string.IsNullOrWhiteSpace(categoryFilter))
            {
                return;
            }
            SearchQuery = "";
        }
        Console.WriteLine($"SEARCH SUBMIT {SearchQuery}");

        var currentStore = UserSettings.Store;
        if (string.IsNullOrWhiteSpace(currentStore))
        {
            Console.WriteLine("Error: Store not found!");
            return;
        }
        try
        {
            Dictionary<string, string> query = new Dictionary<string, string>()
            {
                { "query", SearchQuery},
                {"storeId", currentStore },
                {"categoryFilter", categoryFilter },
                {"orderBy",  "0"},
                {"page", "0" }
            };

            string queryString = string.Join("&", query.Select((x) => x.Key + "=" + x.Value.ToString()));
            Results = await Http.GetFromJsonAsync<SearchResults>($"MicroCenterProxy/searchAll?{queryString}");
            resultElements = new ElementReference[Results.Items.Count];
            Console.WriteLine(Results);
            await ResetFilter();

            SetupSpecFilters();

            CustomSort = new List<string>()
            {
                "Price",
                "Stock"
            };

            State = PageState.Results;
            this.StateHasChanged();
            await SelectNext();
        }
        catch(Exception e)
        {
            State = PageState.Error;
            ErrorText = e.Message;
            ErrorQuery = SearchQuery;
            Console.WriteLine(e.ToString());
        }
        this.StateHasChanged();
        await js.InvokeVoidAsync("setupTooltips");
    }

    private void SetupSpecFilters()
    {
        SpecFilters.Clear();
        var specFields = Results.Items.SelectMany(i => i.Specs.Keys.ToList()).Distinct().ToList();

        string[] ignore = new string[]
        {
            "SKU",
            "Mfr Part#",
            "UPC",
            "What's in the Box",
            "Labor",
            "Parts"
        };

        foreach(var name in ignore)
        {
            specFields.Remove(name);
        }

        specFields.Insert(0, "Brand");
        foreach(var item in Results.Items)
        {
            item.Specs["Brand"] = item.Brand;
            item.Specs["Price"] = item.Price.ToString("0.00");
            item.Specs["Stock"] = item.Stock;
        }

        foreach (var field in specFields)
        {
            var values = Results.Items.Where(i => i.Specs.ContainsKey(field)).SelectMany(i => i.Specs[field].Split('\n')).Distinct().ToList();
            if(values.Count != Results.Items.Count)
            {
                SpecFilters.Add(field, values);
            }
            else
            {
                Console.WriteLine($"Skipping {field}");
            }
        }
    }

    private async void SubmitItem()
    {
        Console.WriteLine($"Add item {Selected.Name}");
        await Action.InvokeAsync(Selected);
    }

    private void SetSort(string sort)
    {
        if(SortField == sort)
        {
            SortAscending = !SortAscending;
            return;
        }
        SortField = sort;
        SortAscending = false;
    }

    private string GetFilterId(string filter, string value)
    {
        return $"{filter}_{value}".Replace(' ', '_');
    }

    private void FilterChanged(string filter, string value, object checkedValue)
    {
        if (checkedValue is bool selected)
        {
            Console.WriteLine(@$"{filter} - {value} has been {(selected ? "CHECKED" : "Unchecked")}");
            if (selected)
            {
                AddFilter(filter, value);
                Console.WriteLine($"{value} is selected");
            }
            else
            {
                RemoveFilter(filter, value);
                Console.WriteLine($"{value} is not selected");
            }
        }
    }

    private void AddFilter(string filter, string value)
    {
        if (!Filters.ContainsKey(filter))
        {
            Filters.Add(filter, new List<string>());
        }
        Filters[filter].Add(value);
        Console.WriteLine($"{filter} + {value}");
        this.StateHasChanged();
    }

    private async void RemoveFilter(string filter, string value)
    {
        if (!Filters.ContainsKey(filter))
        {
            return;
        }

        await js.InvokeVoidAsync("Uncheck", GetFilterId(filter, value));

        Filters[filter].RemoveAll(f => f == value);
        if(Filters[filter].Count == 0)
        {
            Filters.Remove(filter);
        }
        this.StateHasChanged();
        Console.WriteLine($"{filter} - {value}");
    }

    private async Task ResetFilter()
    {
        foreach(var filter in Filters)
        {
            foreach(var value in filter.Value)
            {
                await js.InvokeVoidAsync("Uncheck", GetFilterId(filter.Key, value));
            }
        }
        await js.InvokeVoidAsync("Collapse", "#accordion .collapse");
        Filters.Clear();
    }

    private float SortFunc(Item item)
    {
        if(string.IsNullOrWhiteSpace(SortField))
        {
            return 0f;
        }

        float retVal = 0f;
        var str = item.Specs.ContainsKey(SortField) ? item.Specs[SortField] : "";

        var numbString = System.Text.RegularExpressions.Regex.Match(str, "\\d*\\.*\\d*");
        if (float.TryParse(numbString.Value, out float val))
        {
            retVal = val;
        }
        else
        {
            if(str.Length >= 2)
            {
                retVal = (int)str[0] * 1000 + (int)str[1];
            }
        }

        if(SortField == "Stock" && item.Stock.Contains('+'))
        {
            retVal++;
        }

        if(!SortAscending)
        {
            retVal *= -1;
        }
        return retVal;
    }

    private bool Filter(Item item)
    {
        foreach(var specFilter in SpecFilters)
        {
            if(specFilter.Value.Count == 0)
            {
                continue;
            }

            string value = item.Specs.ContainsKey(specFilter.Key) ? item.Specs[specFilter.Key] : null;
            if (CheckFilter(specFilter.Key, value))
            {
                return false;
            }
        }

        if(InStockOnly && item.Stock == "0")
        {
            return false;
        }

        return true;
    }

    private bool CheckFilter(string key, string value)
    {
        if (Filters.ContainsKey(key)
            && Filters[key].Count > 0)
        {
            if (value == null)
            {
                return !Filters[key].Contains(value);
            }
            return !Filters[key].Any(f => value.Contains(f));
        }

        return false;
    }

    private void ToggleCustomSort(string sort)
    {
        if(CustomSort.Contains(sort))
        {
            CustomSort.Remove(sort);
        }
        else
        {
            CustomSort.Add(sort);
            SetSort(sort);
        }
    }

    public async Task SelectNext()
    {
        var res = FilteredResults.ToList();
        if(Selected == null)
        {
            Selected = res.FirstOrDefault();
        }
        var index = res.IndexOf(Selected);
        if(index < res.Count - 1)
        {
            Selected = res[index + 1];
            await js.InvokeVoidAsync("ScrollToElement", resultElements[index + 1]);
        }
    }

    public async Task SelectPrev()
    {
        var res = FilteredResults.ToList();
        if (Selected == null)
        {
            Selected = res.FirstOrDefault();
        }
        var index = res.IndexOf(Selected);
        if (index > 0 && res.Count > 1)
        {
            Selected = res[index - 1];
            await js.InvokeVoidAsync("ScrollToElement", resultElements[index - 1]);
        }
    }

    private string CSSEscape(string s)
    {
        return Regex.Replace(s, "[\\s\\.()\\/\"']", "_");
    }
}