@using MicroCLib.Models;

@inject HttpClient Http
@inject IJSRuntime js


<div class="row" style="flex-direction:row;">
    <div class="sidebar col-sm-3 bg-dark">
        <div class="sticky-top">
            <form class="search-form" @onsubmit="(() => SearchSubmit())">
                <input class="form-control" placeholder="Search" @bind-value="SearchQuery" />
                <div class="btn-group dropright search-sidebar-item">
                    <button type="button" class="btn btn-primary" @onclick="(() => SearchSubmit())">Search All</button>
                    <button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Categories</span>
                    </button>
                    <div class="dropdown-menu">
                        @if (UserSettings != null)
                        {
                            @foreach (BuildComponent.ComponentType type in UserSettings.Categories)
                            {
                                <a class="dropdown-item" @onclick="@(() => SearchSubmit(BuildComponent.CategoryFilterForType(type)))">
                                    @Enum.GetName(typeof(BuildComponent.ComponentType), type)
                                </a>
                            }
                        }
                    </div>
                </div>
            </form>

            @if (Results != null)
            {
                <div class="btn-group btn-group-toggle search-sidebar-item" data-toggle="buttons">
                    <label class="btn btn-outline-primary">
                        <input type="radio" name="options" id="inStockOnly" autocomplete="off" @onchange="((args) =>  InStockOnly = true)"> In Stock
                    </label>
                    <label class="btn btn-outline-primary active">
                        <input type="radio" name="options" id="allItems" autocomplete="off" checked @onchange="((args) =>  InStockOnly = false)"> All Items
                    </label>
                </div>
                @foreach (var filter in FilterFunctions)
                {
                    <ItemFilter Name="@filter.name"
                                ValueFunc="@filter.filter"
                                @bind-Items="@Results.Items"
                                FilterAdded="@(s => AddFilter(filter.name, s))"
                                FilterRemoved="@(s => RemoveFilter(filter.name, s))" />
                }
                <div class="row mt-auto">
                    <div class="col-sm-6">@Results.Items.Count/@Results.TotalResults</div>
                    <div class="col-sm-6">Page @Results.Page</div>
                </div>
            }
            @if(SpecFilters != null)
            {
                @foreach(var filter in SpecFilters)
                {
                    <div class="btn-group dropright search-sidebar-item" id="@filter.Key">
                        <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @filter.Key
                        </button>
                        <div class="dropdown-menu search-filter-dropdown">
                            <!-- Dropdown menu links -->
                            @foreach (var item in filter.Value)
                            {
                                @if (!string.IsNullOrWhiteSpace(item))
                                {
                                    var id = GetFilterId(filter.Key, item);
                                    <div class="form-check bg-info">
                                        <input class="form-check-input" type="checkbox" value="" id="@id"
                                               @onchange="args => FilterChanged(filter.Key, item, args.Value)">
                                        <label class="form-check-label" for="@id">
                                            @item
                                        </label>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div class="searchBody col-sm-9">
        @if (Results != null)
        {
            <div class="row">
                @foreach(var filter in Filters)
                {
                    <div class="card d-inline-block filter-card" style="width: 18rem;">
                        <div class="card-header">@filter.Key</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var value in filter.Value)
                            {
                                <li class="list-group-item">
                                    <div>@value</div>
                                    <button class="btn btn-danger float-right" @onclick="@(() => RemoveFilter(filter.Key, value))">X</button>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
            <div class="search-header row">
                <div class="col-sm-6">Name</div>
                <div class="col-sm-2">Brand</div>
                <div class="col-sm-2 column-sort" @onclick="@((args) => SetSort("stock"))">
                    @if (SortField == "stock" && SortAscending)
                    {<span class="material-icons">arrow_upward</span>}
                    @if (SortField == "stock" && !SortAscending)
                    {<span class="material-icons">arrow_downward</span>}
                    Stock
                </div>
                <div class="col-sm-2 text-right column-sort" @onclick="@((args) => SetSort("price"))">
                    @if (SortField == "price" && SortAscending)
                    {<span class="material-icons">arrow_upward</span>}
                    @if (SortField == "price" && !SortAscending)
                    {<span class="material-icons">arrow_downward</span>}
                    Price
                </div>
            </div>
            @foreach (var item in Results.Items.Where(Filter).OrderBy(SortFunc))
            {
                <div class="search-item row @(Selected == item ? "selected" :"")"
                     @onclick="@(() => {
                                     Selected = item;
                                     if (string.IsNullOrWhiteSpace(ActionName))
                                     {
                                         SubmitItem();
                                     }
                        })">
                    <div class="col-sm-6">
                        <div class="search-name">@item.Name</div>
                        <div class="search-sku">@item.SKU</div>
                    </div>
                    <div class="col-sm-2 search-brand">@item.Brand</div>
                    <div class="col-sm-2 search-stock">@item.Stock in stock</div>
                    <div class="col-sm-2 text-right search-price">$@string.Format("{0:0.00}", item.Price)</div>
                </div>
            }
        }
    </div>
</div>
<div class="item-search-footer">
    @if (Selected != null)
    {
        @if (!string.IsNullOrWhiteSpace(ActionName))
        {
            <button type="button" class="btn btn-primary" @onclick="SubmitItem">@ActionName</button>
        }
    }
</div>




@code {
    Settings UserSettings;
    [Parameter]
    public string ActionName { get; set; }

    [Parameter]
    public EventCallback<Item> Action { get; set; }

    public SearchResults Results { get; set; }

    private string SearchQuery { get; set; }

    private Item Selected { get; set; }

    private bool InStockOnly { get; set; }

    private List<string> BrandFilter { get; set; }

    private Dictionary<string, List<string>> Filters { get; } = new Dictionary<string, List<string>>();

    private List<(string name, Func<Item, string> filter)> FilterFunctions;

    private Dictionary<string, List<string>> SpecFilters = new Dictionary<string, List<string>>();

    private string SortField;
    private bool SortAscending;

    protected override async Task OnInitializedAsync()
    {
        UserSettings = await Settings.Get(js);

        FilterFunctions = new List<(string, Func<Item, string>)>()
        {
            ("Brand", (i) => i.Brand),
        };
        //Results = new SearchResults()
        //{
        //    Items = new List<Item>()
        //    {
        //        new Item()
        //        {
        //            Name = "AAAA",
        //            OriginalPrice = 99.99f,
        //            Price = 49.99f,
        //            Brand = "A Brand",
        //            Stock = "5",
        //            SKU = "111111"
        //        },
        //        new Item()
        //        {
        //            Name = "AZXY",
        //            OriginalPrice = 99.99f,
        //            Price = 79.99f,
        //            Brand = "A Brand",
        //            Stock = "2",
        //            SKU = "121212"
        //        },
        //        new Item()
        //        {
        //            Name = "BBBB2",
        //            OriginalPrice = 99.99f,
        //            Price = .99f,
        //            Brand = "B Brand",
        //            Stock = "25",
        //            SKU = "323232"
        //        },
        //        new Item()
        //        {
        //            Name = "BBBB",
        //            OriginalPrice = 99.99f,
        //            Price = .99f,
        //            Brand = "B Brand",
        //            Stock = "25+",
        //            SKU = "323232"
        //        },
        //        new Item()
        //        {
        //            Name = "OOS",
        //            OriginalPrice = 99.99f,
        //            Price = .99f,
        //            Brand = "B Brand",
        //            Stock = "0",
        //            SKU = "323232"
        //        },
        //    }
        //};

        BrandFilter = new List<string>();
        ResetFilter();
        await js.InvokeVoidAsync("stopPropagation", ".search-filter-dropdown");
    }

    private async void SearchSubmit(string categoryFilter = "")
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            if(string.IsNullOrWhiteSpace(categoryFilter))
            {
                return;
            }
            SearchQuery = "";
        }
        Console.WriteLine($"SEARCH SUBMIT {SearchQuery}");

        var currentStore = UserSettings.Store;
        if (string.IsNullOrWhiteSpace(currentStore))
        {
            Console.WriteLine("Error: Store not found!");
            return;
        }

        Dictionary<string, string> query = new Dictionary<string, string>()
        {
            { "query", SearchQuery},
            {"storeId", currentStore },
            {"categoryFilter", categoryFilter },
            {"orderBy",  "0"},
            {"page", "0" }
        };
        string queryString = string.Join("&", query.Select((x) => x.Key + "=" + x.Value.ToString()));
        Results = await Http.GetFromJsonAsync<SearchResults>($"MicroCenterProxy/searchAll?{queryString}");
        Console.WriteLine(Results);
        ResetFilter();

        SetupSpecFilters();

        Selected = null;
        this.StateHasChanged();
    }

    private void SetupSpecFilters()
    {
        SpecFilters.Clear();
        var specFields = Results.Items.SelectMany(i => i.Specs.Keys.ToList()).Distinct().ToList();

        string[] ignore = new string[]
        {
            "SKU",
            "Mfr Part#",
            "UPC",
            "What's in the Box",
            "Labor",
            "Parts"
        };

        foreach(var name in ignore)
        {
            specFields.Remove(name);
        }


        foreach (var field in specFields)
        {
            var values = Results.Items.Where(i => i.Specs.ContainsKey(field)).Select(i => i.Specs[field]).Distinct().ToList();
            SpecFilters.Add(field, values);
        }
    }

    private async void SubmitItem()
    {
        Console.WriteLine($"Add item {Selected.Name}");
        await Action.InvokeAsync(Selected);
    }

    private void SetSort(string sort)
    {
        if(SortField == sort)
        {
            SortAscending = !SortAscending;
            return;
        }
        SortField = sort;
        SortAscending = false;
    }

    private string GetFilterId(string filter, string value)
    {
        return $"{filter}_{value}".Replace(' ', '_');
    }

    private void FilterChanged(string filter, string value, object checkedValue)
    {
        if (checkedValue is bool selected)
        {
            Console.WriteLine(@$"{filter} - {value} has been {(selected ? "CHECKED" : "Unchecked")}");
            if (selected)
            {
                AddFilter(filter, value);
                Console.WriteLine($"{value} is selected");
            }
            else
            {
                RemoveFilter(filter, value);
                Console.WriteLine($"{value} is not selected");
            }
        }
    }

    private void BrandFilterChanged(string brand, object checkedValue)
    {
        if (checkedValue is bool selected)
        {
            if (selected)
            {
                BrandFilter.Add(brand);
                Console.WriteLine($"{brand} is selected");
            }
            else
            {
                BrandFilter.Remove(brand);
                Console.WriteLine($"{brand} is not selected");
            }
        }
    }

    private void AddFilter(string filter, string value)
    {
        if (!Filters.ContainsKey(filter))
        {
            Filters.Add(filter, new List<string>());
        }
        Filters[filter].Add(value);
        Console.WriteLine($"{filter} + {value}");
        this.StateHasChanged();
    }

    private async void RemoveFilter(string filter, string value)
    {
        if (!Filters.ContainsKey(filter))
        {
            return;
        }

        await js.InvokeVoidAsync("Uncheck", GetFilterId(filter, value));

        Filters[filter].RemoveAll(f => f == value);
        if(Filters[filter].Count == 0)
        {
            Filters.Remove(filter);
        }
        this.StateHasChanged();
        Console.WriteLine($"{filter} - {value}");
    }

    private void ResetFilter()
    {
        foreach (var f in Filters)
        {
            f.Value.Clear();
        }
    }

    private float SortFunc(Item item)
    {
        float retVal = 0f;
        switch (SortField)
        {
            case "price":
                retVal = item.Price;
                break;
            case "stock":
                var numbString = System.Text.RegularExpressions.Regex.Match(item.Stock, "\\d*");
                if (int.TryParse(numbString.Value, out int val))
                {
                    if (item.Stock.Contains('+'))
                    {
                        val++;
                    }

                    retVal = val;
                }
                break;
        }
        if(!SortAscending)
        {
            retVal *= -1;
        }
        return retVal;
    }

    private bool Filter(Item item)
    {
        if (BrandFilter.Count != 0 && !BrandFilter.Contains(item.Brand))
        {
            return false;
        }

        if (CheckFilter("Brand", item.Brand))
        {
            return false;
        }

        foreach(var specFilter in SpecFilters)
        {
            string value = item.Specs.ContainsKey(specFilter.Key) ? item.Specs[specFilter.Key] : null;
            if (CheckFilter(specFilter.Key, value))
            {
                return false;
            }
        }

        if(InStockOnly && item.Stock == "0")
        {
            return false;
        }

        return true;
    }

    private bool CheckFilter(string key, string value)
    {
        if (Filters.ContainsKey(key)
            && Filters[key].Count > 0
            && !Filters[key].Contains(value))
        {
            return true;
        }

        return false;
    }
}