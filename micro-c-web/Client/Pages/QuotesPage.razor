@page "/quotes"
@using DataFlareClient;
@using System.Text.Json;
@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager NavManager

<div class="container quotes-page">
    <div class="row quote-table-header">
        <div>
            <button class="btn btn-primary float-right" @onclick="OnInitializedAsync">
                <span class="oi oi-reload"></span>
            </button>
            <div class="btn-group float-right">
                <a type="button" class="btn btn-success" href="/quotes/new"><span class="oi oi-plus"></span></a>
                <button type="button" class="btn btn-danger dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="sr-only">Toggle Dropdown</span>
                </button>
                <div class="dropdown-menu">
                    <a class="dropdown-item" href="/quotes/new">Quote</a>
                    <a class="dropdown-item" href="#">Build</a>
                </div>
            </div>
        </div>
    </div>

    @if (flares == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <table class="table table-striped quote-table">
                <thead>
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col">Title</th>
                        <th scope="col">Created</th>
                        <th scope="col">Items</th>
                        <th scope="col">Price</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < flares.Count; i++)
                    {
                        var flare = flares[i];
                        var quote = Quotes[i];
                        <tr class="quote-list-item"
                            data-toggle="tooltip"
                            data-trigger="hover"
                            data-placement="left"
                            data-container=".quotes-page"
                            data-html="true"
                            title="@(string.Join("&#13;", quote.Where(c => c.Item != null).Select(c => c.Item.Name)))">
                            <td scope="row">@flare.ShortCode</td>
                            <td>@flare.Title</td>
                            <td>@flare.Created</td>
                            <td>@quote.Count</td>
                            <td>@quote.Where(c => c.Item != null).Sum(c => c.Item.Price * c.Item.Quantity).ToString("$0.00")</td>
                            <td class="table-hover-column">
                                <div class="dropdown">
                                    <button class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        Open
                                    </button>
                                    <div class="dropdown-menu">
                                        <a class="dropdown-item" href="/quotes/@flare.ShortCode">Quote</a>
                                        <a class="dropdown-item" href="/builds/@flare.ShortCode">Build</a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                    @if (flares.Count == 0)
                    {
                        <tr>
                            <td colspan="6">
                                No quotes found.
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    Settings UserSettings;
    private List<Flare> flares;
    private List<List<MicroCLib.Models.BuildComponent>> Quotes;

    protected override async Task OnInitializedAsync() {
        
        NavManager.LocationChanged += async (sender, args) =>
        {
            await js.InvokeVoidAsync("HideTooltips");
        };

        await js.InvokeVoidAsync("stopPropagation", "#dd .dropdown-menu");

        UserSettings = await Settings.Get(js);
        var currentStore = UserSettings.Store;
        if (string.IsNullOrWhiteSpace(currentStore))
        {
            Console.WriteLine("NO STORE");
            return;
        }
        flares = await DataFlareClient.Flare.GetTag("https://dataflare.bbarrett.me/api/Flare", $"micro-c-{currentStore}");
        Quotes = flares.Select(f => JsonSerializer.Deserialize<List<MicroCLib.Models.BuildComponent>>(f.Data)).ToList();
        await js.InvokeVoidAsync("setupTooltips");
    }
}
